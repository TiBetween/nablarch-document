.. _nablarch_policy:

基本方針
============================

Nablarchアプリケーションフレームワークの基本方針について解説する。


.. _nablarch_architecture-no_input:

外部から受け付ける未入力値の扱い
--------------------------------------------------
アプリケーションは外部から未入力値も含めた様々なデータを受け付ける。
未入力値は一般的に ``null`` と空文字列の２つの表現方法がある。
アプリケーション開発者が２つの表現方法を意識する必要があると実装ミスが起きやすく、思わぬ不具合を生み出す可能性がある。
その問題を回避するためには未入力値の扱いを統一しなければならない。

未入力値の表現方法を統一するために、Nablarchでは未入力値を ``null`` に変換する。
例えば、HTTPリクエストのパラメータやXMLなどの外部から受け付けたデータの未入力値は ``null`` に変換する。
また、カスタムタグやフォーマットして出力するなどの外部へ ``null`` を出力するときは、出力するデータ形式に応じて未入力を意味する値に変換する。
変換はNablarchのハンドラ・ライブラリが行うため、アプリケーションで未入力値を変換する必要はない。
ただし、未入力値を ``null`` に変換するには :ref:`normalize_handler` をハンドラキューに追加する必要がある。

この方針に従い、アプリケーションでは未入力値を ``null`` として開発すること。

コレクションや配列を返すAPIは原則nullを戻さない
--------------------------------------------------
Nablarchが提供するコレクションや配列を返すAPIは、対象データが存在しない場合には基本的に ``null`` ではなく空のコレクションや配列を返す。
これにより、呼び出し元での ``null`` 参照による不具合を防止できたり、分岐が減ることによる可読性の向上が期待できる。

例えば、データベースの検索結果をビュー(JSP)で一覧形式で表示する場合、 ``null`` 判定を行わずにループをすればよくコードの可読性が向上する。
もし、 ``null`` を考慮する必要がある場合、JSPで分岐を書いたり、サーバサイドで ``null`` のコレクションをリクエストスコープに詰めるなど無駄なコードが多くなる。またこれにより実装ミスが起こりやすくなる。

なお、HTTPのリクエストパラメータのように識別子を指定して取得するようなAPIの場合には、空の配列ではなく ``null`` を返す。
